// SPDX-FileCopyrightText: 2024 TriliTech <contact@trili.tech>
//
// SPDX-License-Identifier: MIT

mod mstatus;

use super::{
    effects::{handle_csr_effect, NoEffect, XipEffect},
    root::RootCSRegister,
    CSRegisters,
};
use crate::{
    bits::Bits64,
    state_backend::{AllocatedOf, EffectCell, EffectCellLayout},
    struct_layout,
};
use mstatus::MStatusLayout;
pub(super) use mstatus::MStatusValue;

/// Representation of a value in a CSR
pub type CSRRepr = u64;

/// Value of a Control or State register
#[derive(
    Copy,
    Clone,
    Debug,
    derive_more::Display,
    derive_more::From,
    derive_more::Into,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
)]
#[repr(transparent)]
pub struct CSRValue(CSRRepr);

impl CSRValue {
    /// Access the underlying representation.
    pub fn repr(self) -> CSRRepr {
        self.0
    }
}

impl Bits64 for CSRValue {
    const WIDTH: usize = CSRRepr::WIDTH;

    fn from_bits(value: u64) -> Self {
        Self(value)
    }

    fn to_bits(&self) -> u64 {
        self.repr()
    }
}

macro_rules! csregisters_boilerplate {
    (
        $struct_v:vis struct $struct_t:ident where layout $layout_t:ty {
            $($vis:vis $name:ident: $cell_repr:ty),+
            $( , )?
        }
    ) => {
        $struct_v struct $struct_t <M>
        where
            M: $crate::state_backend::ManagerBase,
        {
            $($vis $name: $cell_repr,)+
        }

        impl<M: $crate::state_backend::ManagerBase> $struct_t<M> {
            pub fn bind(space: AllocatedOf<$layout_t, M>) -> Self {
                Self {
                    $($name: <$cell_repr>::bind(space.$name),)+
                }
            }
        }

        impl<M: $crate::state_backend::ManagerBase> CSRegisters<M> {
            // Methods for operating on a generic CSRegister (used by csrrw/csrrci etc)
            // Not public since they are used only as an abstraction by [CSRegisters]
            #[inline(always)]
            pub(super) fn general_raw_read(&self, csr: RootCSRegister) -> CSRRepr
            where
                M: $crate::state_backend::ManagerRead,
            {
                match csr {
                    $( RootCSRegister::$name => self.registers.$name.read() ),+
                }
            }

            #[inline(always)]
            pub(super) fn general_raw_write(&mut self, csr: RootCSRegister, value: CSRRepr)
            where
                M: $crate::state_backend::ManagerWrite,
            {
                let effect = match csr {
                    $( RootCSRegister::$name => self.registers.$name.write(value) ),+
                };

                handle_csr_effect(self, effect);
            }

            #[inline(always)]
            pub(super) fn general_raw_replace(&mut self, csr: RootCSRegister, value: CSRRepr) -> CSRRepr
            where
                M: $crate::state_backend::ManagerReadWrite,
            {
                let (old_value, effect) = match csr {
                    $( RootCSRegister::$name => self.registers.$name.replace(value) ),+
                };

                handle_csr_effect(self, effect);
                old_value
            }
        }
    };
}

type NoEffectCSR<M> = EffectCell<CSRRepr, NoEffect, M>;
type MipEffectCSR<M> = EffectCell<CSRRepr, XipEffect, M>;

type EffectCSRLayout = EffectCellLayout<CSRRepr>;

csregisters_boilerplate!(
    pub(super) struct CSRegisterValues where layout CSRegisterValuesLayout {
        pub(super) mstatus: MStatusValue<M>,
        pub(super) mip: MipEffectCSR<M>,

        mnscratch: NoEffectCSR<M>,
        mnepc: NoEffectCSR<M>,
        mncause: NoEffectCSR<M>,
        mnstatus: NoEffectCSR<M>,
        cycle: NoEffectCSR<M>,
        time: NoEffectCSR<M>,
        instret: NoEffectCSR<M>,
        mcycle: NoEffectCSR<M>,
        minstret: NoEffectCSR<M>,
        hpmcounter3: NoEffectCSR<M>,
        hpmcounter4: NoEffectCSR<M>,
        hpmcounter5: NoEffectCSR<M>,
        hpmcounter6: NoEffectCSR<M>,
        hpmcounter7: NoEffectCSR<M>,
        hpmcounter8: NoEffectCSR<M>,
        hpmcounter9: NoEffectCSR<M>,
        hpmcounter10: NoEffectCSR<M>,
        hpmcounter11: NoEffectCSR<M>,
        hpmcounter12: NoEffectCSR<M>,
        hpmcounter13: NoEffectCSR<M>,
        hpmcounter14: NoEffectCSR<M>,
        hpmcounter15: NoEffectCSR<M>,
        hpmcounter16: NoEffectCSR<M>,
        hpmcounter17: NoEffectCSR<M>,
        hpmcounter18: NoEffectCSR<M>,
        hpmcounter19: NoEffectCSR<M>,
        hpmcounter20: NoEffectCSR<M>,
        hpmcounter21: NoEffectCSR<M>,
        hpmcounter22: NoEffectCSR<M>,
        hpmcounter23: NoEffectCSR<M>,
        hpmcounter24: NoEffectCSR<M>,
        hpmcounter25: NoEffectCSR<M>,
        hpmcounter26: NoEffectCSR<M>,
        hpmcounter27: NoEffectCSR<M>,
        hpmcounter28: NoEffectCSR<M>,
        hpmcounter29: NoEffectCSR<M>,
        hpmcounter30: NoEffectCSR<M>,
        hpmcounter31: NoEffectCSR<M>,
        mhpmcounter3: NoEffectCSR<M>,
        mhpmcounter4: NoEffectCSR<M>,
        mhpmcounter5: NoEffectCSR<M>,
        mhpmcounter6: NoEffectCSR<M>,
        mhpmcounter7: NoEffectCSR<M>,
        mhpmcounter8: NoEffectCSR<M>,
        mhpmcounter9: NoEffectCSR<M>,
        mhpmcounter10: NoEffectCSR<M>,
        mhpmcounter11: NoEffectCSR<M>,
        mhpmcounter12: NoEffectCSR<M>,
        mhpmcounter13: NoEffectCSR<M>,
        mhpmcounter14: NoEffectCSR<M>,
        mhpmcounter15: NoEffectCSR<M>,
        mhpmcounter16: NoEffectCSR<M>,
        mhpmcounter17: NoEffectCSR<M>,
        mhpmcounter18: NoEffectCSR<M>,
        mhpmcounter19: NoEffectCSR<M>,
        mhpmcounter20: NoEffectCSR<M>,
        mhpmcounter21: NoEffectCSR<M>,
        mhpmcounter22: NoEffectCSR<M>,
        mhpmcounter23: NoEffectCSR<M>,
        mhpmcounter24: NoEffectCSR<M>,
        mhpmcounter25: NoEffectCSR<M>,
        mhpmcounter26: NoEffectCSR<M>,
        mhpmcounter27: NoEffectCSR<M>,
        mhpmcounter28: NoEffectCSR<M>,
        mhpmcounter29: NoEffectCSR<M>,
        mhpmcounter30: NoEffectCSR<M>,
        mhpmcounter31: NoEffectCSR<M>,
        mhpmevent3: NoEffectCSR<M>,
        mhpmevent4: NoEffectCSR<M>,
        mhpmevent5: NoEffectCSR<M>,
        mhpmevent6: NoEffectCSR<M>,
        mhpmevent7: NoEffectCSR<M>,
        mhpmevent8: NoEffectCSR<M>,
        mhpmevent9: NoEffectCSR<M>,
        mhpmevent10: NoEffectCSR<M>,
        mhpmevent11: NoEffectCSR<M>,
        mhpmevent12: NoEffectCSR<M>,
        mhpmevent13: NoEffectCSR<M>,
        mhpmevent14: NoEffectCSR<M>,
        mhpmevent15: NoEffectCSR<M>,
        mhpmevent16: NoEffectCSR<M>,
        mhpmevent17: NoEffectCSR<M>,
        mhpmevent18: NoEffectCSR<M>,
        mhpmevent19: NoEffectCSR<M>,
        mhpmevent20: NoEffectCSR<M>,
        mhpmevent21: NoEffectCSR<M>,
        mhpmevent22: NoEffectCSR<M>,
        mhpmevent23: NoEffectCSR<M>,
        mhpmevent24: NoEffectCSR<M>,
        mhpmevent25: NoEffectCSR<M>,
        mhpmevent26: NoEffectCSR<M>,
        mhpmevent27: NoEffectCSR<M>,
        mhpmevent28: NoEffectCSR<M>,
        mhpmevent29: NoEffectCSR<M>,
        mhpmevent30: NoEffectCSR<M>,
        mhpmevent31: NoEffectCSR<M>,
        mcountinhibit: NoEffectCSR<M>,
        scounteren: NoEffectCSR<M>,
        mcounteren: NoEffectCSR<M>,
        pub(super) fcsr: NoEffectCSR<M>,
        pmpcfg0: NoEffectCSR<M>,
        pmpcfg2: NoEffectCSR<M>,
        pmpcfg4: NoEffectCSR<M>,
        pmpcfg6: NoEffectCSR<M>,
        pmpcfg8: NoEffectCSR<M>,
        pmpcfg10: NoEffectCSR<M>,
        pmpcfg12: NoEffectCSR<M>,
        pmpcfg14: NoEffectCSR<M>,
        pmpaddr0: NoEffectCSR<M>,
        pmpaddr1: NoEffectCSR<M>,
        pmpaddr2: NoEffectCSR<M>,
        pmpaddr3: NoEffectCSR<M>,
        pmpaddr4: NoEffectCSR<M>,
        pmpaddr5: NoEffectCSR<M>,
        pmpaddr6: NoEffectCSR<M>,
        pmpaddr7: NoEffectCSR<M>,
        pmpaddr8: NoEffectCSR<M>,
        pmpaddr9: NoEffectCSR<M>,
        pmpaddr10: NoEffectCSR<M>,
        pmpaddr11: NoEffectCSR<M>,
        pmpaddr12: NoEffectCSR<M>,
        pmpaddr13: NoEffectCSR<M>,
        pmpaddr14: NoEffectCSR<M>,
        pmpaddr15: NoEffectCSR<M>,
        pmpaddr16: NoEffectCSR<M>,
        pmpaddr17: NoEffectCSR<M>,
        pmpaddr18: NoEffectCSR<M>,
        pmpaddr19: NoEffectCSR<M>,
        pmpaddr20: NoEffectCSR<M>,
        pmpaddr21: NoEffectCSR<M>,
        pmpaddr22: NoEffectCSR<M>,
        pmpaddr23: NoEffectCSR<M>,
        pmpaddr24: NoEffectCSR<M>,
        pmpaddr25: NoEffectCSR<M>,
        pmpaddr26: NoEffectCSR<M>,
        pmpaddr27: NoEffectCSR<M>,
        pmpaddr28: NoEffectCSR<M>,
        pmpaddr29: NoEffectCSR<M>,
        pmpaddr30: NoEffectCSR<M>,
        pmpaddr31: NoEffectCSR<M>,
        pmpaddr32: NoEffectCSR<M>,
        pmpaddr33: NoEffectCSR<M>,
        pmpaddr34: NoEffectCSR<M>,
        pmpaddr35: NoEffectCSR<M>,
        pmpaddr36: NoEffectCSR<M>,
        pmpaddr37: NoEffectCSR<M>,
        pmpaddr38: NoEffectCSR<M>,
        pmpaddr39: NoEffectCSR<M>,
        pmpaddr40: NoEffectCSR<M>,
        pmpaddr41: NoEffectCSR<M>,
        pmpaddr42: NoEffectCSR<M>,
        pmpaddr43: NoEffectCSR<M>,
        pmpaddr44: NoEffectCSR<M>,
        pmpaddr45: NoEffectCSR<M>,
        pmpaddr46: NoEffectCSR<M>,
        pmpaddr47: NoEffectCSR<M>,
        pmpaddr48: NoEffectCSR<M>,
        pmpaddr49: NoEffectCSR<M>,
        pmpaddr50: NoEffectCSR<M>,
        pmpaddr51: NoEffectCSR<M>,
        pmpaddr52: NoEffectCSR<M>,
        pmpaddr53: NoEffectCSR<M>,
        pmpaddr54: NoEffectCSR<M>,
        pmpaddr55: NoEffectCSR<M>,
        pmpaddr56: NoEffectCSR<M>,
        pmpaddr57: NoEffectCSR<M>,
        pmpaddr58: NoEffectCSR<M>,
        pmpaddr59: NoEffectCSR<M>,
        pmpaddr60: NoEffectCSR<M>,
        pmpaddr61: NoEffectCSR<M>,
        pmpaddr62: NoEffectCSR<M>,
        pmpaddr63: NoEffectCSR<M>,
        mhartid: NoEffectCSR<M>,
        mvendorid: NoEffectCSR<M>,
        marchid: NoEffectCSR<M>,
        mimpid: NoEffectCSR<M>,
        misa: NoEffectCSR<M>,
        mscratch: NoEffectCSR<M>,
        sscratch: NoEffectCSR<M>,
        stvec: NoEffectCSR<M>,
        mtvec: NoEffectCSR<M>,
        pub(super) mie: NoEffectCSR<M>,
        satp: NoEffectCSR<M>,
        scause: NoEffectCSR<M>,
        mcause: NoEffectCSR<M>,
        sepc: NoEffectCSR<M>,
        mepc: NoEffectCSR<M>,
        stval: NoEffectCSR<M>,
        mtval: NoEffectCSR<M>,
        mtval2: NoEffectCSR<M>,
        mtinst: NoEffectCSR<M>,
        senvcfg: NoEffectCSR<M>,
        menvcfg: NoEffectCSR<M>,
        mconfigptr: NoEffectCSR<M>,
        medeleg: NoEffectCSR<M>,
        mideleg: NoEffectCSR<M>,
        mseccfg: NoEffectCSR<M>,
        scontext: NoEffectCSR<M>,
        hstatus: NoEffectCSR<M>,
        hedeleg: NoEffectCSR<M>,
        hideleg: NoEffectCSR<M>,
        hie: NoEffectCSR<M>,
        hcounteren: NoEffectCSR<M>,
        hgeie: NoEffectCSR<M>,
        htval: NoEffectCSR<M>,
        hip: NoEffectCSR<M>,
        hvip: NoEffectCSR<M>,
        htinst: NoEffectCSR<M>,
        hgeip: NoEffectCSR<M>,
        henvcfg: NoEffectCSR<M>,
        hgatp: NoEffectCSR<M>,
        hcontext: NoEffectCSR<M>,
        htimedelta: NoEffectCSR<M>,
        vsstatus: NoEffectCSR<M>,
        vsie: NoEffectCSR<M>,
        vstvec: NoEffectCSR<M>,
        vsscratch: NoEffectCSR<M>,
        vsepc: NoEffectCSR<M>,
        vscause: NoEffectCSR<M>,
        vstval: NoEffectCSR<M>,
        vsip: NoEffectCSR<M>,
        vsatp: NoEffectCSR<M>,
        tselect: NoEffectCSR<M>,
        tdata1: NoEffectCSR<M>,
        tdata2: NoEffectCSR<M>,
        tdata3: NoEffectCSR<M>,
        tcontrol: NoEffectCSR<M>,
        mcontext: NoEffectCSR<M>,
        dcsr: NoEffectCSR<M>,
        dpc: NoEffectCSR<M>,
        dscratch0: NoEffectCSR<M>,
        dscratch1: NoEffectCSR<M>,
    }
);

struct_layout!(
    pub struct CSRegisterValuesLayout {
        mstatus: MStatusLayout,
        // whole CSRs
        mnscratch: EffectCSRLayout,
        mnepc: EffectCSRLayout,
        mncause: EffectCSRLayout,
        mnstatus: EffectCSRLayout,
        cycle: EffectCSRLayout,
        time: EffectCSRLayout,
        instret: EffectCSRLayout,
        mcycle: EffectCSRLayout,
        minstret: EffectCSRLayout,
        hpmcounter3: EffectCSRLayout,
        hpmcounter4: EffectCSRLayout,
        hpmcounter5: EffectCSRLayout,
        hpmcounter6: EffectCSRLayout,
        hpmcounter7: EffectCSRLayout,
        hpmcounter8: EffectCSRLayout,
        hpmcounter9: EffectCSRLayout,
        hpmcounter10: EffectCSRLayout,
        hpmcounter11: EffectCSRLayout,
        hpmcounter12: EffectCSRLayout,
        hpmcounter13: EffectCSRLayout,
        hpmcounter14: EffectCSRLayout,
        hpmcounter15: EffectCSRLayout,
        hpmcounter16: EffectCSRLayout,
        hpmcounter17: EffectCSRLayout,
        hpmcounter18: EffectCSRLayout,
        hpmcounter19: EffectCSRLayout,
        hpmcounter20: EffectCSRLayout,
        hpmcounter21: EffectCSRLayout,
        hpmcounter22: EffectCSRLayout,
        hpmcounter23: EffectCSRLayout,
        hpmcounter24: EffectCSRLayout,
        hpmcounter25: EffectCSRLayout,
        hpmcounter26: EffectCSRLayout,
        hpmcounter27: EffectCSRLayout,
        hpmcounter28: EffectCSRLayout,
        hpmcounter29: EffectCSRLayout,
        hpmcounter30: EffectCSRLayout,
        hpmcounter31: EffectCSRLayout,
        mhpmcounter3: EffectCSRLayout,
        mhpmcounter4: EffectCSRLayout,
        mhpmcounter5: EffectCSRLayout,
        mhpmcounter6: EffectCSRLayout,
        mhpmcounter7: EffectCSRLayout,
        mhpmcounter8: EffectCSRLayout,
        mhpmcounter9: EffectCSRLayout,
        mhpmcounter10: EffectCSRLayout,
        mhpmcounter11: EffectCSRLayout,
        mhpmcounter12: EffectCSRLayout,
        mhpmcounter13: EffectCSRLayout,
        mhpmcounter14: EffectCSRLayout,
        mhpmcounter15: EffectCSRLayout,
        mhpmcounter16: EffectCSRLayout,
        mhpmcounter17: EffectCSRLayout,
        mhpmcounter18: EffectCSRLayout,
        mhpmcounter19: EffectCSRLayout,
        mhpmcounter20: EffectCSRLayout,
        mhpmcounter21: EffectCSRLayout,
        mhpmcounter22: EffectCSRLayout,
        mhpmcounter23: EffectCSRLayout,
        mhpmcounter24: EffectCSRLayout,
        mhpmcounter25: EffectCSRLayout,
        mhpmcounter26: EffectCSRLayout,
        mhpmcounter27: EffectCSRLayout,
        mhpmcounter28: EffectCSRLayout,
        mhpmcounter29: EffectCSRLayout,
        mhpmcounter30: EffectCSRLayout,
        mhpmcounter31: EffectCSRLayout,
        mhpmevent3: EffectCSRLayout,
        mhpmevent4: EffectCSRLayout,
        mhpmevent5: EffectCSRLayout,
        mhpmevent6: EffectCSRLayout,
        mhpmevent7: EffectCSRLayout,
        mhpmevent8: EffectCSRLayout,
        mhpmevent9: EffectCSRLayout,
        mhpmevent10: EffectCSRLayout,
        mhpmevent11: EffectCSRLayout,
        mhpmevent12: EffectCSRLayout,
        mhpmevent13: EffectCSRLayout,
        mhpmevent14: EffectCSRLayout,
        mhpmevent15: EffectCSRLayout,
        mhpmevent16: EffectCSRLayout,
        mhpmevent17: EffectCSRLayout,
        mhpmevent18: EffectCSRLayout,
        mhpmevent19: EffectCSRLayout,
        mhpmevent20: EffectCSRLayout,
        mhpmevent21: EffectCSRLayout,
        mhpmevent22: EffectCSRLayout,
        mhpmevent23: EffectCSRLayout,
        mhpmevent24: EffectCSRLayout,
        mhpmevent25: EffectCSRLayout,
        mhpmevent26: EffectCSRLayout,
        mhpmevent27: EffectCSRLayout,
        mhpmevent28: EffectCSRLayout,
        mhpmevent29: EffectCSRLayout,
        mhpmevent30: EffectCSRLayout,
        mhpmevent31: EffectCSRLayout,
        mcountinhibit: EffectCSRLayout,
        scounteren: EffectCSRLayout,
        mcounteren: EffectCSRLayout,
        fcsr: EffectCSRLayout,
        pmpcfg0: EffectCSRLayout,
        pmpcfg2: EffectCSRLayout,
        pmpcfg4: EffectCSRLayout,
        pmpcfg6: EffectCSRLayout,
        pmpcfg8: EffectCSRLayout,
        pmpcfg10: EffectCSRLayout,
        pmpcfg12: EffectCSRLayout,
        pmpcfg14: EffectCSRLayout,
        pmpaddr0: EffectCSRLayout,
        pmpaddr1: EffectCSRLayout,
        pmpaddr2: EffectCSRLayout,
        pmpaddr3: EffectCSRLayout,
        pmpaddr4: EffectCSRLayout,
        pmpaddr5: EffectCSRLayout,
        pmpaddr6: EffectCSRLayout,
        pmpaddr7: EffectCSRLayout,
        pmpaddr8: EffectCSRLayout,
        pmpaddr9: EffectCSRLayout,
        pmpaddr10: EffectCSRLayout,
        pmpaddr11: EffectCSRLayout,
        pmpaddr12: EffectCSRLayout,
        pmpaddr13: EffectCSRLayout,
        pmpaddr14: EffectCSRLayout,
        pmpaddr15: EffectCSRLayout,
        pmpaddr16: EffectCSRLayout,
        pmpaddr17: EffectCSRLayout,
        pmpaddr18: EffectCSRLayout,
        pmpaddr19: EffectCSRLayout,
        pmpaddr20: EffectCSRLayout,
        pmpaddr21: EffectCSRLayout,
        pmpaddr22: EffectCSRLayout,
        pmpaddr23: EffectCSRLayout,
        pmpaddr24: EffectCSRLayout,
        pmpaddr25: EffectCSRLayout,
        pmpaddr26: EffectCSRLayout,
        pmpaddr27: EffectCSRLayout,
        pmpaddr28: EffectCSRLayout,
        pmpaddr29: EffectCSRLayout,
        pmpaddr30: EffectCSRLayout,
        pmpaddr31: EffectCSRLayout,
        pmpaddr32: EffectCSRLayout,
        pmpaddr33: EffectCSRLayout,
        pmpaddr34: EffectCSRLayout,
        pmpaddr35: EffectCSRLayout,
        pmpaddr36: EffectCSRLayout,
        pmpaddr37: EffectCSRLayout,
        pmpaddr38: EffectCSRLayout,
        pmpaddr39: EffectCSRLayout,
        pmpaddr40: EffectCSRLayout,
        pmpaddr41: EffectCSRLayout,
        pmpaddr42: EffectCSRLayout,
        pmpaddr43: EffectCSRLayout,
        pmpaddr44: EffectCSRLayout,
        pmpaddr45: EffectCSRLayout,
        pmpaddr46: EffectCSRLayout,
        pmpaddr47: EffectCSRLayout,
        pmpaddr48: EffectCSRLayout,
        pmpaddr49: EffectCSRLayout,
        pmpaddr50: EffectCSRLayout,
        pmpaddr51: EffectCSRLayout,
        pmpaddr52: EffectCSRLayout,
        pmpaddr53: EffectCSRLayout,
        pmpaddr54: EffectCSRLayout,
        pmpaddr55: EffectCSRLayout,
        pmpaddr56: EffectCSRLayout,
        pmpaddr57: EffectCSRLayout,
        pmpaddr58: EffectCSRLayout,
        pmpaddr59: EffectCSRLayout,
        pmpaddr60: EffectCSRLayout,
        pmpaddr61: EffectCSRLayout,
        pmpaddr62: EffectCSRLayout,
        pmpaddr63: EffectCSRLayout,
        mhartid: EffectCSRLayout,
        mvendorid: EffectCSRLayout,
        marchid: EffectCSRLayout,
        mimpid: EffectCSRLayout,
        misa: EffectCSRLayout,
        mscratch: EffectCSRLayout,
        sscratch: EffectCSRLayout,
        stvec: EffectCSRLayout,
        mtvec: EffectCSRLayout,
        mie: EffectCSRLayout,
        satp: EffectCSRLayout,
        scause: EffectCSRLayout,
        mcause: EffectCSRLayout,
        sepc: EffectCSRLayout,
        mepc: EffectCSRLayout,
        stval: EffectCSRLayout,
        mtval: EffectCSRLayout,
        mtval2: EffectCSRLayout,
        mip: EffectCSRLayout,
        mtinst: EffectCSRLayout,
        senvcfg: EffectCSRLayout,
        menvcfg: EffectCSRLayout,
        mconfigptr: EffectCSRLayout,
        medeleg: EffectCSRLayout,
        mideleg: EffectCSRLayout,
        mseccfg: EffectCSRLayout,
        scontext: EffectCSRLayout,
        hstatus: EffectCSRLayout,
        hedeleg: EffectCSRLayout,
        hideleg: EffectCSRLayout,
        hie: EffectCSRLayout,
        hcounteren: EffectCSRLayout,
        hgeie: EffectCSRLayout,
        htval: EffectCSRLayout,
        hip: EffectCSRLayout,
        hvip: EffectCSRLayout,
        htinst: EffectCSRLayout,
        hgeip: EffectCSRLayout,
        henvcfg: EffectCSRLayout,
        hgatp: EffectCSRLayout,
        hcontext: EffectCSRLayout,
        htimedelta: EffectCSRLayout,
        vsstatus: EffectCSRLayout,
        vsie: EffectCSRLayout,
        vstvec: EffectCSRLayout,
        vsscratch: EffectCSRLayout,
        vsepc: EffectCSRLayout,
        vscause: EffectCSRLayout,
        vstval: EffectCSRLayout,
        vsip: EffectCSRLayout,
        vsatp: EffectCSRLayout,
        tselect: EffectCSRLayout,
        tdata1: EffectCSRLayout,
        tdata2: EffectCSRLayout,
        tdata3: EffectCSRLayout,
        tcontrol: EffectCSRLayout,
        mcontext: EffectCSRLayout,
        dcsr: EffectCSRLayout,
        dpc: EffectCSRLayout,
        dscratch0: EffectCSRLayout,
        dscratch1: EffectCSRLayout,
    }
);
