# This file was automatically generated, do not edit.
# Edit file ci/bin/main.ml instead.

stages:
- images
- build
- publishing
- prepare_release
- publish_release_gitlab
- publish_release

oc.docker:ci:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.12.0
  stage: images
  tags:
  - gcp
  dependencies: []
  before_script: []
  script:
  - ./images/ci_create_ci_images.sh
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.6
    CI_DOCKER_HUB: "false"
    ARCH: amd64
  artifacts:
    reports:
      dotenv: ci_image_tag.env

oc.docker:ci:arm64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.12.0
  stage: images
  tags:
  - gcp_arm64
  dependencies: []
  before_script: []
  script:
  - ./images/ci_create_ci_images.sh
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.6
    CI_DOCKER_HUB: "false"
    ARCH: arm64
  artifacts:
    reports:
      dotenv: ci_image_tag.env

oc.build:static-x86_64-linux-binaries:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp
  dependencies:
  - oc.docker:ci:amd64
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  before_script:
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_static_binaries.sh
  after_script:
  - sccache --stop-server || true
  variables:
    ARCH: x86_64
    EXECUTABLE_FILES: script-inputs/released-executables
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
  artifacts:
    expire_in: 90 days
    paths:
    - octez-binaries/$ARCH/*

oc.build:static-arm64-linux-binaries:
  image: ${ci_image_name}/build:${ci_image_tag}
  stage: build
  tags:
  - gcp_arm64
  dependencies:
  - oc.docker:ci:arm64
  cache:
  - key: cargo-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/.cargo/registry/cache
    policy: pull-push
  - key: sccache-$CI_JOB_NAME_SLUG
    paths:
    - $CI_PROJECT_DIR/_sccache
    policy: pull-push
  before_script:
  - ./scripts/ci/take_ownership.sh
  - eval $(opam env)
  - . ./scripts/ci/sccache-start.sh
  script:
  - ./scripts/ci/build_static_binaries.sh
  after_script:
  - sccache --stop-server || true
  variables:
    ARCH: arm64
    EXECUTABLE_FILES: script-inputs/released-executables
    CARGO_NET_OFFLINE: "false"
    SCCACHE_DIR: $CI_PROJECT_DIR/_sccache
  artifacts:
    expire_in: 90 days
    paths:
    - octez-binaries/$ARCH/*

oc.docker:amd64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.12.0
  stage: build
  tags:
  - gcp
  dependencies:
  - oc.docker:ci:amd64
  before_script:
  - ./scripts/ci/docker_initialize.sh
  script:
  - ./scripts/ci/docker_release.sh
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.6
    CI_DOCKER_HUB: "false"
    DOCKER_BUILD_TARGET: without-evm-artifacts
    IMAGE_ARCH_PREFIX: amd64_
    EXECUTABLE_FILES: script-inputs/released-executables script-inputs/experimental-executables

oc.docker:arm64:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.12.0
  stage: build
  tags:
  - gcp_arm64
  dependencies:
  - oc.docker:ci:arm64
  before_script:
  - ./scripts/ci/docker_initialize.sh
  script:
  - ./scripts/ci/docker_release.sh
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.6
    CI_DOCKER_HUB: "false"
    DOCKER_BUILD_TARGET: without-evm-artifacts
    IMAGE_ARCH_PREFIX: arm64_
    EXECUTABLE_FILES: script-inputs/released-executables script-inputs/experimental-executables

oc.build:dpkg:amd64:
  image: $DISTRIBUTION
  stage: build
  tags:
  - gcp
  needs: []
  dependencies: []
  before_script:
  - . ./scripts/version.sh
  - ./scripts/ci/bin_packages_deb_dependencies.sh
  script:
  - wget https://sh.rustup.rs/rustup-init.sh
  - chmod +x rustup-init.sh
  - ./rustup-init.sh --profile minimal --default-toolchain  $recommended_rust_version
    -y
  - . $HOME/.cargo/env
  - export OPAMYES="true"
  - opam init --bare --disable-sandboxing
  - make build-deps
  - eval $(opam env)
  - make $TARGET
  - DISTRO=$(echo "$DISTRIBUTION" | cut -d':' -f1)
  - RELEASE=$(echo "$DISTRIBUTION" | cut -d':' -f2)
  - mkdir -p packages/$DISTRO/$RELEASE
  - mv octez-*.* packages/$DISTRO/$RELEASE/
  variables:
    TARGET: dpkg
    OCTEZ_PKGMAINTAINER: nomadic-labs
    BLST_PORTABLE: "yes"
    ARCH: amd64
    CARGO_HOME: /root/.cargo
    CARGO_NET_OFFLINE: "false"
  artifacts:
    name: ${TARGET}-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - packages/
    when: on_success
  parallel:
    matrix:
    - DISTRIBUTION:
      - debian:bookworm
      - ubuntu:focal
      - ubuntu:jammy

oc.build:rpm:amd64:
  image: $DISTRIBUTION
  stage: build
  tags:
  - gcp
  needs: []
  dependencies: []
  before_script:
  - . ./scripts/version.sh
  - ./scripts/ci/bin_packages_rpm_dependencies.sh
  script:
  - wget https://sh.rustup.rs/rustup-init.sh
  - chmod +x rustup-init.sh
  - ./rustup-init.sh --profile minimal --default-toolchain  $recommended_rust_version
    -y
  - . $HOME/.cargo/env
  - export OPAMYES="true"
  - opam init --bare --disable-sandboxing
  - make build-deps
  - eval $(opam env)
  - make $TARGET
  - DISTRO=$(echo "$DISTRIBUTION" | cut -d':' -f1)
  - RELEASE=$(echo "$DISTRIBUTION" | cut -d':' -f2)
  - mkdir -p packages/$DISTRO/$RELEASE
  - mv octez-*.* packages/$DISTRO/$RELEASE/
  variables:
    TARGET: rpm
    OCTEZ_PKGMAINTAINER: nomadic-labs
    BLST_PORTABLE: "yes"
    ARCH: amd64
    CARGO_HOME: /root/.cargo
    CARGO_NET_OFFLINE: "false"
  artifacts:
    name: ${TARGET}-$ARCH-$CI_COMMIT_REF_SLUG
    expire_in: 1 day
    paths:
    - packages/
    when: on_success
  parallel:
    matrix:
    - DISTRIBUTION:
      - fedora:39
      - rockylinux:9.3

docker:merge_manifests:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.12.0
  stage: prepare_release
  tags:
  - gcp
  needs:
  - oc.docker:amd64
  - oc.docker:arm64
  dependencies: []
  before_script:
  - ./scripts/ci/docker_initialize.sh
  script:
  - ./scripts/ci/docker_merge_manifests.sh
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.6
    CI_DOCKER_HUB: "false"

gitlab:release:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-release:v1.6.0
  stage: publish_release_gitlab
  tags:
  - gcp
  needs:
  - oc.build:static-x86_64-linux-binaries
  - oc.build:static-arm64-linux-binaries
  - oc.build:dpkg:amd64
  - oc.build:rpm:amd64
  dependencies:
  - oc.build:static-x86_64-linux-binaries
  - oc.build:static-arm64-linux-binaries
  - oc.build:dpkg:amd64
  - oc.build:rpm:amd64
  interruptible: false
  script:
  - ./scripts/ci/restrict_export_to_octez_source.sh
  - ./scripts/ci/gitlab-release.sh

apt_repo_debian:
  image: debian:bookworm
  stage: publishing
  tags:
  - gcp
  needs:
  - oc.build:dpkg:amd64
  dependencies:
  - oc.build:dpkg:amd64
  before_script:
  - . ./scripts/version.sh
  - ./scripts/ci/prepare-apt-repo.sh
  script:
  - ./scripts/ci/create_debian_repo.sh debian bookworm
  variables:
    ARCHITECTURES: amd64
    GNUPGHOME: $CI_PROJECT_DIR/.gnupg

apt_repo_ubuntu:
  image: public.ecr.aws/lts/ubuntu:20.04_stable
  stage: publishing
  tags:
  - gcp
  needs:
  - oc.build:dpkg:amd64
  dependencies:
  - oc.build:dpkg:amd64
  before_script:
  - . ./scripts/version.sh
  - ./scripts/ci/prepare-apt-repo.sh
  script:
  - ./scripts/ci/create_debian_repo.sh ubuntu focal jammy
  variables:
    ARCHITECTURES: amd64
    GNUPGHOME: $CI_PROJECT_DIR/.gnupg

docker:promote_to_latest:
  image: ${GCP_REGISTRY}/tezos/docker-images/ci-docker:v1.12.0
  stage: publish_release
  tags:
  - gcp
  needs:
  - docker:merge_manifests
  dependencies: []
  before_script:
  - ./scripts/ci/docker_initialize.sh
  script:
  - ./scripts/ci/docker_promote_to_latest.sh
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_VERSION: 24.0.6
    CI_DOCKER_HUB: "false"
