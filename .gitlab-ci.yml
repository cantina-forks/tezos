stages:
  - build
  - deploy
  - docker
  - manifest

fmt:
  stage: build
  image: ocaml/opam:ubuntu-22.04-ocaml-4.14
  script:
    - opam-2.1 install ocamlformat.0.25.1
    - dune build @fmt

build:
  stage: build
  image: ocaml/opam:ubuntu-22.04-ocaml-4.14
  parallel:
    matrix:
      - ARCH: ["amd64", "arm64"]
        OCTEZ_BRANCH: ["v18.1", "master"]
  tags:
    - ${ARCH}
  variables:
    # Build blst used by ocaml-bls12-381 without ADX to support old CPU
    # architectures.
    # See https://gitlab.com/tezos/tezos/-/issues/1788
    BLST_PORTABLE: "yes"
  before_script:
    - sudo apt update
  script:
    # Temporary fix: v18.1 uses caqti < 2 while master is using >= 2
    - '[[ "${OCTEZ_BRANCH}" == "v18.1" ]] || for I in 2 3 4 ; do find ./server/ -type f -name "*.ml*" -print0 | xargs -0 sed -i s/tup${I}/t${I}/g ; done;'
    - '[[ "${OCTEZ_BRANCH}" == "v18.1" ]] || find ./server/ -type f -name "*.ml*" -print0 | xargs -0 sed -i s/Caqti_lwt.Pool/Caqti_lwt_unix.Pool/g'
    - '[[ "${OCTEZ_BRANCH}" == "v18.1" ]] || find ./server/ -type f -name "*.ml*" -print0 | xargs -0 sed -i s/Caqti_lwt.connect_pool/Caqti_lwt_unix.connect_pool/g'
    - '[[ "${OCTEZ_BRANCH}" == "v18.1" ]] || find . -type f -name "dune" -print0 | xargs -0 sed -i s/caqti-lwt/caqti-lwt.unix/g'
    - git clone --depth 1 --branch $OCTEZ_BRANCH https://gitlab.com/tezos/tezos.git
    - opam-2.1 install -y --deps-only tezos/opam/virtual/octez-deps.opam
    - opam-2.1 install -y caqti-lwt caqti-driver-sqlite3 caqti-driver-postgresql ezgzip safepass --criteria="-changed,-removed"
    - dune build archiver/main.exe server/main.exe
  artifacts:
    name: binaries-${ARCH}-${OCTEZ_BRANCH}
    expire_in: 1 week
    paths:
      - archiver/main.exe
      - server/main.exe

.release:
  image: alpine
  script:
    - 'apk add zip'
    - 'apk add curl'
    - 'zip ./${ARCHIVE} archiver/main.exe server/main.exe'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./${ARCHIVE} "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/teztale/${CI_COMMIT_TAG:=latest}/${ARCHIVE}"'
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG != null

release:amd64:v18.1:
  stage: deploy
  extends: .release
  dependencies: ["build: [amd64, v18.1]"]
  variables:
    ARCHIVE: "binaries-amd64-v18.1.zip"

release:amd64:master:
  stage: deploy
  extends: .release
  dependencies: ["build: [amd64, master]"]
  variables:
    ARCHIVE: "binaries-amd64-master.zip"

release:arm64:v18.1:
  stage: deploy
  extends: .release
  dependencies: ["build: [arm64, v18.1]"]
  variables:
    ARCHIVE: "binaries-arm64-v18.1.zip"

release:arm64:master:
  stage: deploy
  extends: .release
  dependencies: ["build: [arm64, master]"]
  variables:
    ARCHIVE: "binaries-arm64-master.zip"

.docker:
  image: docker
  parallel:
    matrix:
      - ARCH: ["amd64", "arm64"]
        OCTEZ_BRANCH: ["v18.1", "master"]
        TARGET: ["server", "archiver"]
  needs:
    - job: "build"
      artifacts: false
      # actualy sure we want artifacts but only the one of our arch so we download them in the script
  tags:
    - devops
    - ${ARCH}
  before_script:
    - echo ${CI_REGISTRY_IMAGE}/${TARGET}-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}
    - apk --no-cache add curl jq
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - 'PARENT_JOB_ID=`curl -L ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs\?job_token=${CI_JOB_TOKEN}\&scope=success | jq ".[] | select(.name == \"build: [${ARCH}, ${OCTEZ_BRANCH}]\") | .id"`'
    - curl -L -o artifacts.zip ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${PARENT_JOB_ID}/artifacts\?job_token=${CI_JOB_TOKEN} && unzip artifacts.zip && rm artifacts.zip
    - docker build -t ${CI_REGISTRY_IMAGE}/${TARGET}-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG} -f Dockerfile.${TARGET} .

docker:
  stage: docker
  extends: .docker
  script:
    - !reference [.docker, script]
    - docker push ${CI_REGISTRY_IMAGE}/${TARGET}-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}
  rules:
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_REGISTRY_IMAGE
      when: manual
      allow_failure: true

docker-test:
  stage: docker
  extends: .docker
  script:
    - !reference [.docker, script]
    - docker save -o ${CI_REGISTRY_IMAGE}/${TARGET}-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}.tar ${CI_REGISTRY_IMAGE}/${TARGET}-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}
  artifacts:
    name: ${CI_REGISTRY_IMAGE}/${TARGET}-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}.tar
    expire_in: 1 week
    paths:
      - ${CI_REGISTRY_IMAGE}/${TARGET}-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}.tar
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

manifest:
  stage: manifest
  image: docker
  parallel:
    matrix:
      - OCTEZ_BRANCH: ["v18.1", "master"]
        TARGET: ["server", "archiver"]
  variables:
    ARCH: "amd64 arm64"
  needs:
    - job: "docker"
      artifacts: false
  tags:
    - devops
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker manifest create ${CI_REGISTRY_IMAGE}/${TARGET}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG} `for i in ${ARCH} ; do echo "--amend ${CI_REGISTRY_IMAGE}/${TARGET}-$i:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}" ; done`
    - docker manifest push ${CI_REGISTRY_IMAGE}/${TARGET}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}
  rules:
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_REGISTRY_IMAGE
      when: manual
      allow_failure: true
