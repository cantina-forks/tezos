# FIXME: the release stage will download the artifacts from all of the build matrix jobs
# If GitLab CI end up allowing variable expansion in needs:parallel:matrix we will be able to specify:
#  needs:
#    - job: build
#      artifacts: true
#      parallel:
#        matrix:
#          - ARCH: ${ARCH}
#            OCTEZ_BRANCH: ${OCTEZ_BRANCH}
# Until then, we rename artifacts so that {archiver,server}/main.exe are located under a ${ARCH}-${OCTEZ_BRANCH}
# Jobs that need artifacts from build will have to download artifacts from ALL build jobs
# but use only the files located in the right ${ARCH}-${OCTEZ_BRANCH} directory.

stages:
  - build
  - deploy
  - docker

.supported_ARCH: &supported_ARCH ["amd64", "arm64"] 
.supported_OCTEZ_BRANCH: &supported_OCTEZ_BRANCH ["octez-v20.0", "master"]

# Repeating these as variables that can be used for for loops in scripts
variables:
  supported_ARCH: "amd64 arm64"
  supported_OCTEZ_BRANCH: "octez-v20.0 master"

.default_matrix: &default_matrix
  matrix:
    - RUNNER: "amd64"
      ARCH: "amd64"
      OCTEZ_BRANCH: *supported_OCTEZ_BRANCH
    - RUNNER: "gcp_arm64"
      ARCH: "arm64"
      OCTEZ_BRANCH: *supported_OCTEZ_BRANCH

fmt:
  stage: build
  image: ocaml/opam:ubuntu-22.04-ocaml-4.14
  script:
    - opam-2.1 install ocamlformat.0.24.1
    - dune build @fmt

build:
  stage: build
  image: ocaml/opam:ubuntu-22.04-ocaml-4.14
  parallel: *default_matrix
  tags:
    - ${RUNNER}
  variables:
    # Build blst used by ocaml-bls12-381 without ADX to support old CPU
    # architectures.
    # See https://gitlab.com/tezos/tezos/-/issues/1788
    BLST_PORTABLE: "yes"
  before_script:
    - sudo apt update
    - eval $(opam env)
  script:
    - git clone --depth 1 --branch $OCTEZ_BRANCH https://gitlab.com/tezos/tezos.git
    - opam-2.1 install -y --deps-only tezos/opam/virtual/octez-deps.opam
    - opam-2.1 install -y caqti caqti-driver-sqlite3 caqti-driver-postgresql ezgzip safepass
    - dune build archiver/main.exe server/main.exe
    - mkdir -p ./${ARCH}-${OCTEZ_BRANCH}/{archiver,server}
    - cp --parents {archiver,server}/main.exe ./${ARCH}-${OCTEZ_BRANCH}/
  artifacts:
    name: binaries-${ARCH}-${OCTEZ_BRANCH}
    expire_in: 1 week
    paths:
      - ./${ARCH}-${OCTEZ_BRANCH}/archiver/main.exe
      - ./${ARCH}-${OCTEZ_BRANCH}/server/main.exe

# Don't forget to specify ARCH and OCTEZ_BRANCH variable when extending this rule
.needs-build:
  needs:
    - job: build
      artifacts: true
  before_script:
    - mv ./${ARCH}-${OCTEZ_BRANCH}/archiver/main.exe ./archiver/
    - mv ./${ARCH}-${OCTEZ_BRANCH}/server/main.exe ./server/

# To release specific package version, create a (gitlab) tag on branch main
release:
  stage: deploy
  image: alpine
  parallel:
    matrix:
      - OCTEZ_BRANCH: *supported_OCTEZ_BRANCH
        ARCH: *supported_ARCH
  extends: .needs-build
  before_script:
    - !reference [.needs-build, before_script]
    - apk add zip curl
  script:
    - zip ./binaries-${ARCH}-${OCTEZ_BRANCH}.zip archiver/main.exe server/main.exe
    - curl --header "JOB-TOKEN:$CI_JOB_TOKEN" --upload-file ./binaries-${ARCH}-${OCTEZ_BRANCH}.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/teztale/${CI_COMMIT_TAG:=latest}/${ARCHIVE}"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG != null

.docker-rules:
  rules:
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_REGISTRY_IMAGE
      when: manual
      allow_failure: true

docker:
  image: docker
  stage: docker
  parallel: *default_matrix
  extends:
    - .needs-build
    - .docker-rules
  tags:
    - ${RUNNER}
  before_script:
    - !reference [.needs-build, before_script]
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - set -xv
    - >
      for BIN in archiver server ; do
        docker build -t ${CI_REGISTRY_IMAGE}/$BIN-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG} -f Dockerfile.$BIN . ;
      done
    - >
      for BIN in archiver server ; do
        docker push ${CI_REGISTRY_IMAGE}/$BIN-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG} ;
      done

# Create multiarch manifest
manifest:
  stage: docker
  image: docker
  parallel:
    matrix:
      - OCTEZ_BRANCH: *supported_OCTEZ_BRANCH
  extends:
    - .docker-rules
  tags:
    - devops
  needs:
    - job: docker
      artifacts: false
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - set -xv
    - >
      for BIN in archiver server ; do
        for ARCH in ${supported_ARCH} ; do echo "--amend ${CI_REGISTRY_IMAGE}/$BIN-$ARCH:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}" ; done ;
        docker manifest create ${CI_REGISTRY_IMAGE}/$BIN:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG} `for ARCH in ${supported_ARCH} ; do echo "--amend ${CI_REGISTRY_IMAGE}/$BIN-$ARCH:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG}" ; done ;`;
        docker manifest push ${CI_REGISTRY_IMAGE}/$BIN:${OCTEZ_BRANCH}-${CI_COMMIT_TAG:=$CI_COMMIT_REF_SLUG} ;
      done ;
