stages:
  - build
  - docker
  - manifest

fmt:
  stage: build
  image: ocaml/opam:ubuntu-22.04-ocaml-4.14
  script:
    - opam-2.1 install ocamlformat.0.25.1
    - dune build @fmt

build:
  stage: build
  image: ocaml/opam:ubuntu-22.04-ocaml-4.14
  parallel:
    matrix:
      - ARCH: ["amd64", "arm64"]
        OCTEZ_BRANCH: ["v17.1"]
  tags:
    - ${ARCH}
  variables:
    # Build blst used by ocaml-bls12-381 without ADX to support old CPU
    # architectures.
    # See https://gitlab.com/tezos/tezos/-/issues/1788
    BLST_PORTABLE: "yes"
    TARGET: "server"
    TEST: "foo bar"
  before_script:
    - sudo apt update
  script:
    - git clone --depth 1 --branch $OCTEZ_BRANCH https://gitlab.com/tezos/tezos.git
    - opam-2.1 install -y --deps-only tezos/opam/virtual/octez-deps.opam
    - opam-2.1 install -y caqti-lwt caqti-driver-sqlite3 caqti-driver-postgresql safepass
    - dune build archiver/main.exe server/main.exe
  artifacts:
    name: binaries-${ARCH}-${OCTEZ_BRANCH}
    expire_in: 1 week
    paths:
      - archiver/main.exe
      - server/main.exe

docker:
  stage: docker
  image: docker
  parallel:
    matrix:
      - ARCH: ["amd64", "arm64"]
        OCTEZ_BRANCH: ["v17.1"]
        TARGET: ["server", "archiver"]
  needs:
    - job: "build"
      artifacts: false
      # actualy sure we want artifacts but only the one of our arch so we download them in the script
  tags:
    - devops
    - ${ARCH}
  before_script:
    - apk --no-cache add curl jq
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - 'PARENT_JOB_ID=`curl -L ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs\?job_token=${CI_JOB_TOKEN}\&scope=success | jq ".[] | select(.name == \"build: [${ARCH}, ${OCTEZ_BRANCH}]\") | .id"`'
    - curl -L -o artifacts.zip ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${PARENT_JOB_ID}/artifacts\?job_token=${CI_JOB_TOKEN} && unzip artifacts.zip && rm artifacts.zip
    - docker build -t ${CI_REGISTRY_IMAGE}/${TARGET}-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_REF_SLUG} -f Dockerfile.${TARGET} .
    - docker push ${CI_REGISTRY_IMAGE}/${TARGET}-${ARCH}:${OCTEZ_BRANCH}-${CI_COMMIT_REF_SLUG}
  rules:
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_REGISTRY_IMAGE
      when: manual
      allow_failure: true

manifest:
  stage: manifest
  image: docker
  parallel:
    matrix:
      - OCTEZ_BRANCH: ["v17.1"]
        TARGET: ["server", "archiver"]
  variables:
    ARCH: "amd64 arm64"
  needs:
    - job: "docker"
      artifacts: false
  tags:
    - devops
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker manifest create ${CI_REGISTRY_IMAGE}/${TARGET}:${OCTEZ_BRANCH}-${CI_COMMIT_REF_SLUG} `for i in ${ARCH} ; do echo "--amend ${CI_REGISTRY_IMAGE}/${TARGET}-$i:${OCTEZ_BRANCH}-${CI_COMMIT_REF_SLUG}" ; done`
    - docker manifest push ${CI_REGISTRY_IMAGE}/${TARGET}:${OCTEZ_BRANCH}-${CI_COMMIT_REF_SLUG}
  rules:
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_REGISTRY_IMAGE
      when: manual
      allow_failure: true
